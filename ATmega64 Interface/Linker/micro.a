;//-------------------------------------------------------------------------------------------------
;// micro modules with ATmega64 microcontroller
;// By TAB Electric.
;//-------------------------------------------------------------------------------------------------
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdio.h>
;#include <stdlib.h>
;#include "micro.h"
;
;//-------------------------------------------------------------------------------------------------
;//
;// Initialaize the USART
;//
;//----------------------
;void micro_USART_Init(void)
; 0001 0011 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 0012 	// USART0 initialization
; 0001 0013 	// Communication Parameters: 8 Data, 1 Stop, No Parity
; 0001 0014 	// USART0 Receiver: Off
; 0001 0015 	// USART0 Transmitter: On
; 0001 0016 	// USART0 Mode: Asynchronous
; 0001 0017 	// USART0 Baud rate: 57600
; 0001 0018 	UCSRA = 0x02;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0001 0019 	UCSRB = 0x98;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0001 001A 	UCSRC = 0x06;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0001 001B 	UBRRH = (UBRR >> 8) & 0xFF;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0001 001C 	UBRRL = UBRR & 0xFF;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0001 001D }
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;
;//-------------------------------------------------------------------------------------------------
;//
;// Microcontroller's Initialization.
;//
;//--------------------------------
;void micro_init(void)
; 0001 0025 {
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0001 0026 	MCUCR = 0X01;	//Write the Interrupt Vector Change Enable (IVCE) bit to one.
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0001 0027 
; 0001 0028 	DDRA = 0XFF;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0001 0029 	DDRB = 0XFF;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0001 002A 	DDRC = 0X00;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0001 002B 	DDRD = 0XFC;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0001 002C 	PORTA = 0X00;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0001 002D 	PORTB = 0X00;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0001 002E 	PORTC = 0XFF;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0001 002F 	PORTD = 0X00;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0001 0030 
; 0001 0031 	SFIOR = 0X00;	//Special Function IO Register.	Bit 3 – ACME: Analog Comparator Multiplexer Enable is off. Bit 2 – PUD: Pull-up disable
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0001 0032 
; 0001 0033 	micro_USART_Init();
;PCODE: $00000031 VOL: 0
; 0001 0034 
; 0001 0035 	sei();
;PCODE: $00000032 VOL: 0
	sei
;PCODE: $00000033 VOL: 0
; 0001 0036 }
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;
;//-------------------------------------------------------------------------------------------------
;//
;// Turns LEDs on or off.
;//
;//-----------------
;void LED_turn(int i, on_off b)
; 0001 003E {
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0001 003F 	if (b) PORTD &= ~(1 << (5 + i));
;	i -> Y+1
;	b -> Y+0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0001 0040 	else PORTD |= 1 << (5 + i);
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0001 0041 }
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;
;//-------------------------------------------------------------------------------------------------
;//
;// Toggles LEDs.
;//
;//-----------------
;void LED_toggle(int i)
; 0001 0049 {
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0001 004A 	PORTD ^= 1 << (5 + i);
;	i -> Y+0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0001 004B }
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;
;//-------------------------------------------------------------------------------------------------
;//
;// Read the ouput of the black box.
;//
;//-----------------
;int Read()
; 0001 0053 {
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0001 0054 	return PINC;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0001 0055 }
;PCODE: $00000064 VOL: 0
;
;//-------------------------------------------------------------------------------------------------
;//
;// Send the encoded parameter k with input mask imask to the black box.
;//
;//-----------------
;void Write(int k, int imask)
; 0001 005D {
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0001 005E 	int i;
; 0001 005F 	int data = 0;
; 0001 0060 	for(i = 0; i < 20; i++)
;PCODE: $00000067 VOL: 0
;	k -> Y+6
;	imask -> Y+4
;	i -> R16,R17
;	data -> R18,R19
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0001 0061 	{
; 0001 0062 		if (k & (1 << i)) data |= Is[i];
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0001 0063 	}
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0001 0064 	PORTA = data & 0xff;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0001 0065 	PORTB = (data >> 8) & 0x3;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0001 0066 	if(imask > 0x3ff)
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0001 0067 	{
; 0001 0068 		DDRC = (imask >> 10) & 0xff;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0001 0069 		PORTC = (data >> 10) & 0xff;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0001 006A 	}
; 0001 006B }
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;
;//-------------------------------------------------------------------------------------------------
;//
;// Decoder of the delay code nomber.
;//
;//-----------------
;int delayTime(int d)
; 0001 0073 {
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0001 0074 	switch (d)
;	d -> Y+0
;PCODE: $000000A2 VOL: 0
; 0001 0075 	{
; 0001 0076 		case 1:
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0001 0077 			return(1);
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0001 0078 			break;
;PCODE: $000000A8 VOL: 0
; 0001 0079 		case 2:
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0001 007A 			return(5);
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0001 007B 			break;
;PCODE: $000000AF VOL: 0
; 0001 007C 		case 3:
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0001 007D 			return(25);
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0001 007E 			break;
;PCODE: $000000B6 VOL: 0
; 0001 007F 		case 4:
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0001 0080 			return(125);
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0001 0081 			break;
;PCODE: $000000BD VOL: 0
; 0001 0082 		case 5:
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0001 0083 			return(625);
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0001 0084 			break;
;PCODE: $000000C4 VOL: 0
; 0001 0085 		case 6:
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0001 0086 			return(5);
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0001 0087 			break;
;PCODE: $000000CB VOL: 0
; 0001 0088 		case 7:
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0001 0089 			return(25);
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0001 008A 			break;
;PCODE: $000000D2 VOL: 0
; 0001 008B 		case 8:
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0001 008C 			return(125);
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0001 008D 			break;
;PCODE: $000000D9 VOL: 0
; 0001 008E 		case 9:
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0001 008F 			return(625);
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0001 0090 			break;
;PCODE: $000000E0 VOL: 0
; 0001 0091 	}
;PCODE: $000000E1 VOL: 0
; 0001 0092 }
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;
;//-------------------------------------------------------------------------------------------------
;//
;// Delay for the predetermined code nombers.
;//
;//-----------------
;void delay(int d)
; 0001 009A {
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0001 009B 	switch (d)
;	d -> Y+0
;PCODE: $000000E7 VOL: 0
; 0001 009C 	{
; 0001 009D 		case 0:
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0001 009E 			nop();
;PCODE: $000000EA VOL: 0
	nop
;PCODE: $000000EB VOL: 0
; 0001 009F 			break;
;PCODE: $000000EC VOL: 0
; 0001 00A0 		case 1:
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0001 00A1 			delay_us(1);
;PCODE: $000000F0 VOL: 0
; 0001 00A2 			break;
;PCODE: $000000F1 VOL: 0
; 0001 00A3 		case 2:
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0001 00A4 			delay_us(5);
;PCODE: $000000F5 VOL: 0
; 0001 00A5 			break;
;PCODE: $000000F6 VOL: 0
; 0001 00A6 		case 3:
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0001 00A7 			delay_us(25);
;PCODE: $000000FA VOL: 0
; 0001 00A8 			break;
;PCODE: $000000FB VOL: 0
; 0001 00A9 		case 4:
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0001 00AA 			delay_us(125);
;PCODE: $000000FF VOL: 0
; 0001 00AB 			break;
;PCODE: $00000100 VOL: 0
; 0001 00AC 		case 5:
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0001 00AD 			delay_us(625);
;PCODE: $00000104 VOL: 0
; 0001 00AE 			break;
;PCODE: $00000105 VOL: 0
; 0001 00AF 		case 6:
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0001 00B0 			delay_ms(5);
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0001 00B1 			break;
;PCODE: $0000010C VOL: 0
; 0001 00B2 		case 7:
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0001 00B3 			delay_ms(25);
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0001 00B4 			break;
;PCODE: $00000113 VOL: 0
; 0001 00B5 		case 8:
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0001 00B6 			delay_ms(125);
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0001 00B7 			break;
;PCODE: $0000011A VOL: 0
; 0001 00B8 		case 9:
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0001 00B9 			delay_ms(625);
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0001 00BA 			break;
;PCODE: $00000121 VOL: 0
; 0001 00BB 		default:
;PCODE: $00000122 VOL: 0
; 0001 00BC 			delay_ms(1000);
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0001 00BD 			break;
;PCODE: $00000126 VOL: 0
; 0001 00BE 	}
;PCODE: $00000127 VOL: 0
; 0001 00BF }
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;
;
;//-------------------------------------------------------------------------------------------------
;//
;// Send the clock signal for the clock pin of the black box.
;//
;//-----------------
;void clock()
; 0001 00C8 {
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0001 00C9 	PORTA ^= 1;
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0001 00CA }
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
